# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the "main" branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
#
# To use this workflow, you will need to complete the following setup steps.
#
# 1. Create a `main.tf` file in the root of this repository with the `remote` backend and one or more resources defined.
#   Example `main.tf`:
#     # The configuration for the `remote` backend.
#     terraform {
#       backend "remote" {
#         # The name of your Terraform Cloud organization.
#         organization = "example-organization"
#
#         # The name of the Terraform Cloud workspace to store Terraform state files in.
#         workspaces {
#           name = "example-workspace"
#         }
#       }
#     }
#
#     # An example resource that does nothing.
#     resource "null_resource" "example" {
#       triggers = {
#         value = "A example resource that does nothing!"
#       }
#     }
#
#
# 2. Generate a Terraform Cloud user API token and store it as a GitHub secret (e.g. TF_API_TOKEN) on this repository.
#   Documentation:
#     - https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html
#     - https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
#
# 3. Reference the GitHub secret in step using the `hashicorp/setup-terraform` GitHub Action.
#   Example:
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

name: "Terraform Validation"

on:
  push:
    paths:
      - "**.tf"
      - "**.tfvars"
      - "**.tftest.hcl"
  pull_request:
    paths:
      - "**.tf"
      - "**.tfvars"
      - "**.tftest.hcl"

permissions:
  contents: read

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: ${{ github.event_name == 'pull_request' && 2 || 0 }}

    - id: changed-files
      name: Get changed files
      run: |
        if ${{ github.event_name == 'pull_request' }}; then
          echo "changed_files=$(git diff --name-only -r HEAD^1 HEAD -- '***.tf' '***.tfvars' '***.tftest.hcl' | xargs)" >> ${GITHUB_OUTPUT}
        else
          echo "changed_files=$(git diff --name-only ${{ github.event.before }} ${{ github.event.after }} -- '***.tf' '***.tfvars' '***.tftest.hcl' | xargs)" >> ${GITHUB_OUTPUT}
        fi

    - id: changed-directories
      name: Get changed directories
      run: |
        directories=()
        for file in ${{ steps.changed-files.outputs.changed_files }}; do
          directory=$(dirname ${file})
          directories+=(${directory})
        done
        unique_directories=$(sort -u <<< "${directories[@]}")
        echo "changed_directories=${unique_directories[@]}" >> $GITHUB_OUTPUT

    # Install the latest version of the Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: |
        files=${{ steps.changed-files.outputs.changed_files }}
        echo "Checking files: ${files}"
        terraform fmt -check -diff ${files}

    # Checks that verify whether a configuration is syntactically valid and internally consistent, regardless of any provided variables or existing state.
    - name: Terraform Validate
      run: |
        for directory in ${{ steps.changed-directories.outputs.changed_directories }}; do
          echo "Validating $directory"
          cd ${directory} && terraform init -backend=false && terraform validate
        done
